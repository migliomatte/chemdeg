[{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://migliomatte.github.io/chemdeg/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://migliomatte.github.io/chemdeg/articles/chemdeg_basics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"chemdeg basics","text":"key aspect food science prediction change food quality time, thus quantitative analysis shelf life foods components paramount importance. chemdeg package developed assist food chemists objective selection degradation kinetic models foods parameters estimation. software implements two-step method purpose. First, experimental data analyzed -called phase space allows estimation order reaction; data fitted appropriate standard kinetic model estimate reaction rate. whole procedure driven rigorous statistical analyses results. package also provides routine fit non-standard kinetic degradation model named first-order multi-target model (FOMT). standard degradation kinetics food components described within following differential equation formalizes mass-action law: \\[\\frac{d y}{d t}=-k\\,y^n \\tag{1} \\] \\(y\\) concentration reactant (.e. concentration degrading food molecule), \\(t\\) time, \\(k\\) rate constant \\(n\\) order reaction. order \\(n\\) can assume either integer (e.g. 0,1,2…) fractional values may observed complex degradation reactions like overall multistage reaction composed single reactions different reaction orders. logarithmic transformation eq.(1) yields: \\[ \\log{|\\frac{d y}{d t}}|=\\log{k}+n\\,\\log{y}\\] \\(\\log{}\\) natural logarithm. plot \\(\\log{|\\frac{dy}{dt}|}\\) versus \\(\\log{y}\\) defines phase space dynamical system, standard nth reaction order kinetic models represented straight lines slope equal \\(n\\) intercept equal logarithm \\(k\\). Derivatives calculated central finite difference method. slope can easily determined linear regression (weighted experimental error available) log-transformed data. known unknown uncertainties can affect estimation. Thus first decision appropriate order reaction taken program basis following four criteria: 95% confidence interval \\(n\\) includes one integer numbers, best estimate reaction order integer number integer closest mean estimate \\(n\\); 95% confidence interval \\(n\\) include integer numbers order reaction considered fractional equal best estimate; estimated order \\(n\\) statistically significant intercept significant, likely order reaction 0; neither estimates slope intercept statistically significant different modeling approach must considered. package provides possible non-linear alternative model (FOMT, see model section) general solution eq.(1) : \\[ y(t)=\\begin{cases} ((n-1)\\,k\\,t+y_0^{1-n}))^{\\frac{1}{n-1}} & \\text{$n\\ne 0$} \\\\ y_0\\,e^{-k\\,t} & \\text{$n=0$} \\end{cases} \\] reaction order determined, non-linear least squares regression can performed using solution rate constant \\(k\\) free parameter.","code":""},{"path":"https://migliomatte.github.io/chemdeg/articles/chemdeg_basics.html","id":"package-usage","dir":"Articles","previous_headings":"","what":"Package usage","title":"chemdeg basics","text":"function det_order() performs one analysis described Introduction section. input function must least two-columns data-frame time data first column concentration second column. values experimental error can given optional third column. Different input types data-frames less two 3 columns return error. output function ord_res class object. function results() shows comprehensive summary results. include: results linear regression performed phase space, estimate n confidence interval; comment conclusion can drawn phase space analysis; results regression performed experimental data conventional concentration vs. time space solution eq.(1), estimate rate constant confidence interval; goodness--fit statistics final fit (see next section) function plot_ord() allows graphical visualization results obtained whole analysis. Function automatically plots experimental error provided. plots, black lines show best regression curve, whereas green lines show fits reaction order chosen according criteria given previous section.  functions phase_space() kin_regr() allow retrieve linear regression phase space regression selected model, respectively:","code":"ord1 # simulated data from a first order kinetic model with error #>   t concentration   std.error #> 1 0    14.3786746 0.077039565 #> 2 1     7.4582106 0.059189631 #> 3 2     3.7612821 0.129590803 #> 4 3     1.8158076 0.083778548 #> 5 4     0.9189166 0.005502180 #> 6 5     0.4479939 0.006840325 res <- det_order(ord1) #> Reaction order estimated: 1 class(res) #> [1] \"ord_res\" results(res) #>  #> Linear regression in the phase space:  #> log(dx/dt)= 0.97 log(x) + ( -0.46 ) #>  #> Estimate of n: #>  #>     Estimate   Std. Error      t value     Pr(>|t|)  #> 9.701806e-01 4.235714e-03 2.290477e+02 1.835114e-07  #>  #> Confidence interval of n:  #>     2.5 %    97.5 %  #> 0.9567007 0.9836605  #>  #> Statistical analysis indicates that an order 1 degradation kineitc model is likely to describe the data. #> The null hypothesis H0: #> \"The process is described by an order 1kinetic model\" #>  cannot be rejected. #>  #> Non-linear least squares regression was performed with an order  1  kinetic model: #>   #>  Estimate of k:  #>    Estimate  Std. Error  t value     Pr(>|t|) #> k 0.6878765 0.002626997 261.8489 1.541636e-11 #> Waiting for profiling to be done... #> Confidence interval of k:  #>      2.5%     97.5%  #> 0.6812276 0.6947116  #>  #> Goodness-of-fit: #>                  Value #> AIC:        -11.933893 #> AICc:       -10.933893 #> BIC:        -12.350374 #> RMSE:         2.002812 #> Chi-sq_red:   5.379602 #> ----------------------------------------------------- plot_ord(res) linear_model_phase_space <- phase_space(res) linear_model_phase_space #>  #> Call: #> stats::lm(formula = log_dx_dt ~ log_x, data = ldframe, weights = 1/ldframe$err_log^2) #>  #> Coefficients: #> (Intercept)        log_x   #>     -0.4618       0.9702 kinetic_regression <- kin_regr(res) kinetic_regression #> Nonlinear regression model #>   model: y ~ y0 * exp(-k * t) #>    data: list(t = dframe[[1]], y = dframe[[2]], y0 = y0, err = err) #>      k  #> 0.6879  #>  weighted residual sum-of-squares: 20.06 #>  #> Number of iterations to convergence: 3  #> Achieved convergence tolerance: 4.421e-08"},{"path":"https://migliomatte.github.io/chemdeg/articles/chemdeg_basics.html","id":"goodness-of-fit-measures","dir":"Articles","previous_headings":"Package usage","what":"Goodness-of-fit measures","title":"chemdeg basics","text":"Goodness--fit statistics include functions already accessible package stats, like: Bayesian Information Criterion (stats::BIC()), Akaike’s Information Criterion (stats::AIC()) Root Mean Square Error (stats::sigma()). package chemdeg two measures introduced, reduced chi-squared (\\(\\chi^2_{red}=\\chi^2/df\\), \\(df\\) degrees freedom) Akaike’s Information Criterion AICc corrected finite samples. values statistics accessible functions chiquad_red() AICC(), respectively. whole statistics can accessed goodness_of_fit()function.","code":"chiquad_red(kinetic_regression) #> [1] 5.379602 AICC(kinetic_regression) #> [1] -10.93389 goodness_of_fit(kinetic_regression) #>                  Value #> AIC:        -11.933893 #> AICc:       -10.933893 #> BIC:        -12.350374 #> RMSE:         2.002812 #> Chi-sq_red:   5.379602"},{"path":"https://migliomatte.github.io/chemdeg/articles/chemdeg_basics.html","id":"other-functions","dir":"Articles","previous_headings":"Package usage","what":"Other functions","title":"chemdeg basics","text":"generate formula object containing formula nth kinetic reaction model, function f_gen(n) can called, giving n input.","code":"f_gen(1) #> y ~ y0 * exp(-k * t) #> <environment: 0x5590ae676588> f_gen(2) #> y ~ (1 * (k * t + (y0^(-1))/1))^-1 #> <environment: 0x5590ae6e7920>"},{"path":[]},{"path":"https://migliomatte.github.io/chemdeg/articles/chemdeg_basics.html","id":"first-order-multi-target-model-fomt","dir":"Articles","previous_headings":"Package usage > Other Models","what":"First-Order Multi-Target model (FOMT)","title":"chemdeg basics","text":"FOMT model equivalent Single-Hit Multi-Target model (SHMT), model developed field radiation biology describe fraction cell surviving radiation treatments. radio-biology problem calculate probability cell survival dose D radiation whereas present context probability molecules survive within given time interval. cases, assumption events hit cell , case, food sample random occur constant mean rate \\(k\\) independently time since last event (hits, therefore, follow Poisson distribution). sample composed sub-units least m must inactivated least one hit, overall survival probability given equation: \\[\\frac{Y(t)}{Y_0}=1-(1-e^{-k\\,t})^n \\] information model development can found work. chemdeg FOMT model can fitted calling FOMT() function, giving input data-frame time, concentration error (optional) first three columns. output nls class object thus functions package stats can used retrieve regression information. Even case goodness--fit can accessed goodness_of_fit() function. non-linear fit FOMT model quite sensitive initial value parameters particularly true exponent m. FOMT() function implements routine automatic selection approximate initial values model parameters based analysis actual experimental data (see par_est_FOMT()). However, FOMT() fails converge, possible input manually initial parameter values using function FOMTm() RHS formula stats::nls() function:","code":"dat <- data.frame(   time = c(0, 1, 2, 3, 4, 5),   conc = c(1, 0.99, 0.98, 0.5, 0.24, 0.12) )  try(FOMT(dat)) #> Error in numericDeriv(form[[3L]], names(ind), env, central = nDcentral) :  #>   Missing value or an infinity produced when evaluating the model nls(conc ~ FOMTm(time, k, n),   data = list(     conc = dat$conc,     time = dat$time   ),   start = list(k = 1, n = 12) ) #> Nonlinear regression model #>   model: conc ~ FOMTm(time, k, n) #>    data: list(conc = dat$conc, time = dat$time) #>      k      n  #>  1.147 24.433  #>  residual sum-of-squares: 0.00772 #>  #> Number of iterations to convergence: 8  #> Achieved convergence tolerance: 6.811e-06"},{"path":[]},{"path":"https://migliomatte.github.io/chemdeg/articles/chemdeg_basics.html","id":"generic-workflow","dir":"Articles","previous_headings":"Examples","what":"Generic workflow","title":"chemdeg basics","text":"chemdeg package contains simulated actual experimental data can used training purposes. urfa data concern normalized degradation kinetics ascorbic acid Urfa peppers dehydrated hot air 55, 65 75°C (Dağhan et al., 2018). urfa returns data-frame 4 columns. first time following degradation data measured different temperatures. Data format readable det_order() function (see Package usage): data-frame must transformed data-frame two columns (three experimental error available), first containing time data second measured concentration compound (note data must necessarily normalized respect concentration molecule time 0): function returns message informs user best ordinary model can explain data, order 2 degradation kinetic model case. function results() provides information: first returns estimate order n along confidence interval. remind algorithm automatically chooses integer value (present within confidence interval) nearest estimate n. example, estimate 1.6 CI 0.8-2.4, value taken 2. might nonetheless right value. example scientific literature precious information might suggest reaction model order equal 1 (inside CI) explain data. case alternative models used fit data results compared. results() function, however, returns explanation certain value n chosen. order reaction estimated 2 non-linear regression data appropriate model performed estimated value rate constant k confidence interval given. Finally, goodness--fit statistics showed non-linear regressions (note holds reaction orders \\(\\ne 0\\)). call function plot_ord() allows visualize results:  plot left side represents phase space system. right side, kinetic data plotted together model’s regression curve. results show 2nd-order degradation model best explains data. following example, however, shows always possible proceed straightforwardly present case caution recommended drawing conclusions appropriate degradation kinetic model best fit experimental data.","code":"urfa #>    time_min AA_55 AA_65 AA_75 #> 1         0  1.00  1.00  1.00 #> 2        60  0.69  0.56  0.39 #> 3       120  0.51  0.45  0.23 #> 4       180  0.43  0.37  0.19 #> 5       240  0.37  0.29  0.17 #> 6       300  0.31  0.25  0.14 #> 7       360  0.24  0.21  0.11 #> 8       480  0.20  0.16  0.09 #> 9       720  0.17  0.12  0.08 #> 10      840  0.16  0.10  0.08 #> 11      960  0.15  0.10  0.07 try(det_order(urfa)) #> Error in det_order(urfa) :  #>   Error: the number of columns provided does not match the #>              requirements. Only dataframe with 2 columns (time,data) #>              and 3 columns (time,data,error) are accepted urfa1 <- data.frame(urfa$time_min, urfa$AA_55) ord.urfa.1 <- det_order(urfa1) #> Reaction order estimated: 2 results(ord.urfa.1) #>  #> Linear regression in the phase space:  #> log(dx/dt)= 2.45 log(x) + ( -4.56 ) #>  #> Estimate of n: #>  #>     Estimate   Std. Error      t value     Pr(>|t|)  #> 2.454865e+00 2.571281e-01 9.547245e+00 1.198314e-05  #>  #> Confidence interval of n:  #>    2.5 %   97.5 %  #> 1.861927 3.047804  #>  #> Statistical analysis indicates that an order 2 degradation kineitc model is likely to describe the data. #> The null hypothesis H0: #> \"The process is described by an order 2kinetic model\" #>  cannot be rejected. #>  #> Non-linear least squares regression was performed with an order  2  kinetic model: #>   #>  Estimate of k:  #>      Estimate   Std. Error  t value     Pr(>|t|) #> k 0.007517079 0.0002185557 34.39434 1.022054e-11 #> Waiting for profiling to be done... #> Confidence interval of k:  #>        2.5%       97.5%  #> 0.007047215 0.008026010  #>  #> Goodness-of-fit: #>                   Value #> AIC:        -54.4227221 #> AICc:       -53.9782777 #> BIC:        -53.6269316 #> RMSE:         0.0178302 #> Chi-sq_red:          NA #> NB: Reduced Chi-squared is not calculated with unweighted data #> ----------------------------------------------------- plot_ord(ord.urfa.1)"},{"path":"https://migliomatte.github.io/chemdeg/articles/chemdeg_basics.html","id":"fomt-example","dir":"Articles","previous_headings":"Examples","what":"FOMT example","title":"chemdeg basics","text":"case load data fomtdata package, concerns degradation kinetics 1.2 mM solution 5-caffeoylquinic acid (5-CQA) presence 1.2 mM ascorbic acid (Yusaku Kuniyo, 2013). case data ready passed det_order() function: Indeed, results : case software suggests 0-order model might actually fit data. However plot results indicates 0-order model actually suitable explain experimental data: Please remind kin_regr() function returns kinetic regression kinetic data. Information can retrieved eventually check regression indeed reliable: However, data previous plot show time-dependent trend reminiscent graph nonlinear FOMT function. functionFOMT() permits fit data name model: possible function FOMT() able converge. initial parameter values automatically chosen program close enough true ones (information see stats::nls() package stats). perform non-linear regression manual input initial parameter value required using functionFOMTm() RHS formula: following plot compares results linear (red color) non-linear regression analysis experimental data:  FOMT model fits data much better linear model.","code":"fomtdata #>   time_h tCQA_AA #> 1      0   1.000 #> 2      5   0.997 #> 3     24   0.994 #> 4     48   0.424 #> 5     72   0.190 #> 6     96   0.072 #> 7    144   0.053 #> 8    168   0.001 ord.cqa <- det_order(fomtdata) #> Reaction order estimated: 0 results(ord.cqa) #>  #> Linear regression in the phase space:  #> log(dx/dt)= -0.07 log(x) + ( -6.35 ) #>  #> Estimate of n: #>  #>    Estimate  Std. Error     t value    Pr(>|t|)  #> -0.06502888  0.57024177 -0.11403739  0.91364577  #>  #> Confidence interval of n:  #>     2.5 %    97.5 %  #> -1.530882  1.400824  #>  #> Estimate of the intercept is significant; but the estimate of slope is not. #> The data are likely to be described by an 0-order kinetic model. #>  #> Linear  regression was performed (0-order kinetics). #>    #> Estimated k value:  #>  #> Call: #> stats::lm(formula = y ~ t, data = list(t = dframe[[1]], y = dframe[[2]])) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.26063 -0.19418  0.07587  0.12336  0.22518  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  0.927907   0.113881   8.148 0.000184 *** #> t           -0.006629   0.001251  -5.298 0.001834 **  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.2074 on 6 degrees of freedom #> Multiple R-squared:  0.8239, Adjusted R-squared:  0.7945  #> F-statistic: 28.06 on 1 and 6 DF,  p-value: 0.001834 #>  #>  #> Confidence interval of k:  #>       2.5 %      97.5 %  #> 0.009690610 0.003567045  #> ----------------------------------------------------- plot_ord(ord.cqa) lin <- kin_regr(ord.cqa) summary(lin) #>  #> Call: #> stats::lm(formula = y ~ t, data = list(t = dframe[[1]], y = dframe[[2]])) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.26063 -0.19418  0.07587  0.12336  0.22518  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  0.927907   0.113881   8.148 0.000184 *** #> t           -0.006629   0.001251  -5.298 0.001834 **  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.2074 on 6 degrees of freedom #> Multiple R-squared:  0.8239, Adjusted R-squared:  0.7945  #> F-statistic: 28.06 on 1 and 6 DF,  p-value: 0.001834 FOMT(fomtdata) #> Nonlinear regression model #>   model: y ~ 1 - (1 - exp(-k * t))^n #>    data: list(y = y, t = t) #>       k       n  #> 0.05684 9.47817  #>  residual sum-of-squares: 0.0108 #>  #> Number of iterations to convergence: 10  #> Achieved convergence tolerance: 3.922e-06 regr.FOMT <- nls(y ~ FOMTm(t, k, n),   data = list(y = fomtdata$tCQA_AA, t = fomtdata$time_h),   start = list(n = 10, k = 0.05) ) summary(regr.FOMT) #>  #> Formula: y ~ FOMTm(t, k, n) #>  #> Parameters: #>   Estimate Std. Error t value Pr(>|t|)     #> n 9.478165   3.926142   2.414 0.052280 .   #> k 0.056836   0.008206   6.926 0.000449 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.04243 on 6 degrees of freedom #>  #> Number of iterations to convergence: 9  #> Achieved convergence tolerance: 5.173e-06 plot(fomtdata$time_h, fomtdata$tCQA_AA,   xlab = \"time (h)\", ylab = \"C/C0\" ) new_t <- seq(0, max(fomtdata$time_h), length.out = 100) lines(new_t, predict(regr.FOMT, newdata = list(t = new_t))) lines(fomtdata$time_h, predict(lin), col = \"red\") goodness_of_fit(regr.FOMT) #>                    Value #> AIC:        -24.15681095 #> AICc:       -21.75681095 #> BIC:        -23.91848633 #> RMSE:         0.04243006 #> Chi-sq_red:           NA"},{"path":"https://migliomatte.github.io/chemdeg/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matteo Migliorini. Author, maintainer, copyright holder. Roberto Chignola. Author.","code":""},{"path":"https://migliomatte.github.io/chemdeg/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Migliorini M, Fierri , Zoccatelli G, Chignola R (2024). “Chemdeg, R package analysis foods isothermal degradation kinetics.” Journal Food Engineering, 363(0260-8774), 111778. doi:10.1016/j.jfoodeng.2023.111778.","code":"@Article{,   title = {Chemdeg, an R package for the analysis of foods isothermal degradation kinetics},   author = {Matteo Migliorini and Ilaria Fierri and Gianni Zoccatelli and Roberto Chignola},   journal = {Journal of Food Engineering},   year = {2024},   volume = {363},   number = {0260-8774},   pages = {111778},   doi = {10.1016/j.jfoodeng.2023.111778}, }"},{"path":"https://migliomatte.github.io/chemdeg/index.html","id":"chemdeg","dir":"","previous_headings":"","what":"Analysis of Chemical Degradation Kinetic Data","title":"Analysis of Chemical Degradation Kinetic Data","text":"chemdeg package developed assist food chemists objective selection degradation kinetic models foods parameters estimation. software implements two-step method purpose. First, experimental data analyzed -called phase space allows estimation order reaction; data fitted appropriate standard kinetic model estimate reaction rate. whole procedure driven rigorous statistical analyses results. package also provides routine fit non-standard kinetic degradation model named first-order multi-target model (FOMT).","code":""},{"path":"https://migliomatte.github.io/chemdeg/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analysis of Chemical Degradation Kinetic Data","text":"can install development version chemdeg like :","code":"# from CRAN install.packages(\"chemdeg\")  # from GitHub library(devtools) devtools::install_github(\"migliomatte/chemdeg\",                           dependencies = TRUE, build_vignettes = TRUE)"},{"path":"https://migliomatte.github.io/chemdeg/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Analysis of Chemical Degradation Kinetic Data","text":"","code":"library(chemdeg)"},{"path":"https://migliomatte.github.io/chemdeg/index.html","id":"determination-of-the-reaction-order","dir":"","previous_headings":"Usage","what":"Determination of the reaction order","title":"Analysis of Chemical Degradation Kinetic Data","text":"determination reaction order generic degradation kinetic model often prone subjectivity. analyzing phase space kinetic system possible statistically determine reaction order. information can used determine reaction rate constant. package chemdeg whole analysis can performed function det_order(): ord1 built function 1st-order kinetic model data. function results returns statistics parameters estimates: Plots data phase space normal concentration vs time space along best fits model equations can accessed plot_ord():","code":"res <- det_order(ord1) #> Reaction order estimated: 1 results(res) #>  #> Linear regression in the phase space:  #> log(dx/dt)= 0.97 log(x) + ( -0.46 ) #>  #> Estimate of n: #>  #>     Estimate   Std. Error      t value     Pr(>|t|)  #> 9.701806e-01 4.235714e-03 2.290477e+02 1.835114e-07  #>  #> Confidence interval of n:  #>     2.5 %    97.5 %  #> 0.9567007 0.9836605  #>  #> Statistical analysis indicates that an order 1 degradation kineitc model is likely to describe the data. #> The null hypothesis H0: #> \"The process is described by an order 1kinetic model\" #>  cannot be rejected. #>  #> Non-linear least squares regression was performed with an order  1  kinetic model: #>   #>  Estimate of k:  #>    Estimate  Std. Error  t value     Pr(>|t|) #> k 0.6878765 0.002626997 261.8489 1.541636e-11 #> Waiting for profiling to be done... #> Confidence interval of k:  #>      2.5%     97.5%  #> 0.6812276 0.6947116  #>  #> Goodness-of-fit: #>                  Value #> AIC:        -11.933893 #> AICc:       -10.933893 #> BIC:        -12.350374 #> RMSE:         2.002812 #> Chi-sq_red:   5.379602 #> ----------------------------------------------------- plot_ord(res)"},{"path":"https://migliomatte.github.io/chemdeg/index.html","id":"first-order-multi-target-model-fitting","dir":"","previous_headings":"Usage","what":"First-order multi-target model fitting","title":"Analysis of Chemical Degradation Kinetic Data","text":"following example first-order multi-target (FOMT) model. FOMT() function can used perform fit: fomtdata example data-frame provided package. FOMT() function converge, possible use nls function stats package follows:","code":"fit_fomt <- FOMT(fomtdata) summary(fit_fomt) #>  #> Formula: y ~ 1 - (1 - exp(-k * t))^n #>  #> Parameters: #>   Estimate Std. Error t value Pr(>|t|)     #> k 0.056836   0.008206   6.926 0.000449 *** #> n 9.478174   3.926148   2.414 0.052280 .   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.04243 on 6 degrees of freedom #>  #> Number of iterations to convergence: 10  #> Achieved convergence tolerance: 3.98e-06 fit_fomt1 <- nls(y ~ FOMTm(t, k, n),   data = list(y = fomtdata$tCQA_AA, t = fomtdata$time_h),   start = list(n = 10, k = 0.05) ) summary(fit_fomt1) #>  #> Formula: y ~ FOMTm(t, k, n) #>  #> Parameters: #>   Estimate Std. Error t value Pr(>|t|)     #> n 9.478163   3.926141   2.414 0.052280 .   #> k 0.056836   0.008206   6.926 0.000449 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.04243 on 6 degrees of freedom #>  #> Number of iterations to convergence: 9  #> Achieved convergence tolerance: 5.453e-06"},{"path":"https://migliomatte.github.io/chemdeg/index.html","id":"goodness-of-fit-statistics","dir":"","previous_headings":"Usage","what":"Goodness-of-fit statistics","title":"Analysis of Chemical Degradation Kinetic Data","text":"chemdeg implements chi-squared reduced statistics (χred2 = χ2/df df degrees freedom) Akaike Information Criterion correction small sample size (AICc) goodness fit measures. can accessed functions chiquad_red()AICC(), respectively. access full table comprising Bayesian Information Criterion (BIC), Akaike Information Criterion (AIC), AICc, Root Means Squared Error (RMSE) χred2 (package stats chemdeg) call function goodness_of_fit(): details see","code":"goodness_of_fit(fit_fomt) #>                    Value #> AIC:        -24.15681095 #> AICc:       -21.75681095 #> BIC:        -23.91848633 #> RMSE:         0.04243006 #> Chi-sq_red:           NA vignette(\"chemdeg_basics\",\"chemdeg\")"},{"path":"https://migliomatte.github.io/chemdeg/reference/AICC.html","id":null,"dir":"Reference","previous_headings":"","what":"Akaike Information Criterion With Correction — AICC","title":"Akaike Information Criterion With Correction — AICC","text":"function calculates Akaike Information Criterion correction small samples size.","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/AICC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Akaike Information Criterion With Correction — AICC","text":"","code":"AICC(fit)"},{"path":"https://migliomatte.github.io/chemdeg/reference/AICC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Akaike Information Criterion With Correction — AICC","text":"fit 'nls'-object","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/AICC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Akaike Information Criterion With Correction — AICC","text":"Returns AICc value","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/AICC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Akaike Information Criterion With Correction — AICC","text":"sample size small, substantial probability AIC (see stats::AIC() details) select models many parameters, .e. AIC overfit. AICc AIC correction small sample sizes. AICc computed follows: $$AICc=AIC+\\frac{2\\,k\\,(k+1)}{n-k-1}$$ n denotes sample size k denotes number parameters. Thus , AICc essentially AIC extra penalty term number parameters. Note \\(n\\rightarrow \\infty\\), extra penalty term converges 0, thus AICc converges AIC.","code":""},{"path":[]},{"path":"https://migliomatte.github.io/chemdeg/reference/AICC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Akaike Information Criterion With Correction — AICC","text":"","code":"t <- seq(0, 10, 1) y <- 1 / (0.5 * exp(t) + 1) + stats::rnorm(length(t), 0, 0.05)  fit <- nls(y ~ 1 / (k * exp(t) + 1),   data = list(t = t, y = y),   start = list(k = 0.2) ) AICC(fit) #> [1] -30.46595"},{"path":"https://migliomatte.github.io/chemdeg/reference/FOMT.html","id":null,"dir":"Reference","previous_headings":"","what":"First-Order Multi-Target model regression — FOMT","title":"First-Order Multi-Target model regression — FOMT","text":"function performs non-linear regression using first-order multi-target model. model equation : $$\\frac{S}{S_0}=1-(1-e^{-k\\,t})^m$$ \\(S/S_0\\) fraction surviving molecules, \\(k\\) average number hits per time unit, \\(m\\) number hits required degrade molecule,  \\(t\\) time.","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/FOMT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"First-Order Multi-Target model regression — FOMT","text":"","code":"FOMT(dtframe)"},{"path":"https://migliomatte.github.io/chemdeg/reference/FOMT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"First-Order Multi-Target model regression — FOMT","text":"dtframe data-frame containing 2 3 columns: time, normalized concentration error (optional), respectively","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/FOMT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"First-Order Multi-Target model regression — FOMT","text":"Returns results regression nls object.","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/FOMT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"First-Order Multi-Target model regression — FOMT","text":"FOMT model proposed alternative Weibull equation commonly used time-dependent behavior data significantly deviates predicted standard chemical models.","code":""},{"path":[]},{"path":"https://migliomatte.github.io/chemdeg/reference/FOMT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"First-Order Multi-Target model regression — FOMT","text":"","code":"t <- c(0, 4, 8, 12, 16, 20) conc <- c(1, 0.98, 0.99, 0.67, 0.12, 0.03) err <- c(0.02, 0.05, 0.04, 0.04, 0.03, 0.02) dframe <- data.frame(t, conc, err) FOMT <- FOMT(dframe) plot(dframe[[1]], dframe[[2]]) arrows(dframe[[1]], dframe[[2]] + dframe[[3]],   dframe[[1]], dframe[[2]] - dframe[[3]],   length = 0 ) newt <- seq(0, 21, by = 0.1) lines(newt, predict(FOMT, newdata = list(t = newt)))   dframe1 <- data.frame(t, conc) FOMT1 <- FOMT(dframe1) plot(dframe1[[1]], dframe1[[2]]) lines(newt, predict(FOMT1, newdata = list(t = newt)))  summary(FOMT) #>  #> Formula: y ~ 1 - (1 - exp(-k * t))^n #>  #> Parameters: #>    Estimate Std. Error t value Pr(>|t|)     #> k   0.52026    0.02686  19.372 4.19e-05 *** #> n 565.99823  194.55489   2.909   0.0437 *   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.4256 on 4 degrees of freedom #>  #> Number of iterations to convergence: 11  #> Achieved convergence tolerance: 4.322e-07 #>  summary(FOMT1) #>  #> Formula: y ~ 1 - (1 - exp(-k * t))^n #>  #> Parameters: #>    Estimate Std. Error t value Pr(>|t|)     #> k   0.53083    0.02934  18.090 5.49e-05 *** #> n 645.79027  235.80553   2.739    0.052 .   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.0134 on 4 degrees of freedom #>  #> Number of iterations to convergence: 12  #> Achieved convergence tolerance: 3.295e-06 #>"},{"path":"https://migliomatte.github.io/chemdeg/reference/FOMTm.html","id":null,"dir":"Reference","previous_headings":"","what":"First-Order Multi-Target model — FOMTm","title":"First-Order Multi-Target model — FOMTm","text":"Call function return formula Single-Hit Multi-Target model (FOMT): $$1-(1-e^{-k\\,t})^n$$","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/FOMTm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"First-Order Multi-Target model — FOMTm","text":"","code":"FOMTm(t, k, m)"},{"path":"https://migliomatte.github.io/chemdeg/reference/FOMTm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"First-Order Multi-Target model — FOMTm","text":"t time k average number hits per time unit m minimum number hits required degrade molecule","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/FOMTm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"First-Order Multi-Target model — FOMTm","text":"Returns calculated values using formula FOMT model can used inside function nls RHS formula.","code":""},{"path":[]},{"path":"https://migliomatte.github.io/chemdeg/reference/FOMTm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"First-Order Multi-Target model — FOMTm","text":"","code":"t <- seq(0, 100, by = 1) k <- 0.1 n <- 200 y <- FOMTm(t, k, n) plot(t, y, type = \"l\")"},{"path":"https://migliomatte.github.io/chemdeg/reference/chiquad_red.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduced chi-squared — chiquad_red","title":"Reduced chi-squared — chiquad_red","text":"Function returns reduced chi-squared (\\(\\chi^2_{red}=\\chi^2/df\\), \\(df\\) degrees freedom) value non-linear regression model (nls object). Reduced-chi squared goodness--fit measure. Values close 1 indicates good fit, values \\(>>1\\) indicate poor fit values \\(<1\\) indicate -fitting. function calculated non-linear regression weighted experimental error.","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/chiquad_red.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduced chi-squared — chiquad_red","text":"","code":"chiquad_red(fit)"},{"path":"https://migliomatte.github.io/chemdeg/reference/chiquad_red.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduced chi-squared — chiquad_red","text":"fit nls object weighted fit","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/chiquad_red.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduced chi-squared — chiquad_red","text":"Returns reduced chi-squared value","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/chiquad_red.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Reduced chi-squared — chiquad_red","text":"Philip R. Bevington, D. Keith Robinson, J. Morris Blair, . John Mallinckrodt, Susan McKay (1993). Data Reduction Error Analysis Physical Sciences","code":""},{"path":[]},{"path":"https://migliomatte.github.io/chemdeg/reference/chiquad_red.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduced chi-squared — chiquad_red","text":"","code":"x <- c(1, 2, 3, 4, 5) y <- c(1.2, 3.9, 8.6, 17.4, 26) er <- c(0.5, 0.8, 0.5, 1.9, 1.2) fit1 <- nls(y ~ k * x^2,   data = list(x = x, y = y),   start = list(k = 1),   weights = 1 / er^2 ) chiquad_red(fit1) #> [1] 0.9896681  fit2 <- nls(y ~ k * x^3,   data = list(x = x, y = y),   start = list(k = 1),   weights = 1 / er^2 ) chiquad_red(fit2) #> [1] 22.55793"},{"path":"https://migliomatte.github.io/chemdeg/reference/det_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Determining reaction order and kinetic formula — det_order","title":"Determining reaction order and kinetic formula — det_order","text":"functions seeks determine reaction order kinetic rate constant chemical models best fit degradation kinetic data. input function data-frame organized follows: first columns, time data; second columns, concentration data; third column (optional, highly recommended), experimental error","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/det_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determining reaction order and kinetic formula — det_order","text":"","code":"det_order(dframe)"},{"path":"https://migliomatte.github.io/chemdeg/reference/det_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determining reaction order and kinetic formula — det_order","text":"dframe data-frame 2 3 columns, containing time, concentrations, (optional) error data.","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/det_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determining reaction order and kinetic formula — det_order","text":"ord_res object containing list following information: phase space coordinates transformed data; linear regression performed phase space; boolean variable indicating estimate degradation rate constant statistically significant; non-linear regression performed using n^th^-order kinetic model (n=0 regression linear); data-frame given input; estimated reaction order.","code":""},{"path":[]},{"path":"https://migliomatte.github.io/chemdeg/reference/det_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determining reaction order and kinetic formula — det_order","text":"","code":"t <- c(0, 4, 8, 12, 16, 20) conc <- c(1, 0.51, 0.24, 0.12, 0.07, 0.02) err <- c(0.02, 0.05, 0.04, 0.04, 0.03, 0.02) dframe <- data.frame(t, conc) res <- det_order(dframe) #> Reaction order estimated: 1  class(res) #> [1] \"ord_res\"    dframe2 <- data.frame(t, conc, err) res2 <- det_order(dframe2) #> Reaction order estimated: 1  res2[[5]] == dframe2 #>         t conc  err #> [1,] TRUE TRUE TRUE #> [2,] TRUE TRUE TRUE #> [3,] TRUE TRUE TRUE #> [4,] TRUE TRUE TRUE #> [5,] TRUE TRUE TRUE #> [6,] TRUE TRUE TRUE"},{"path":"https://migliomatte.github.io/chemdeg/reference/f_gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula of an n-order model. — f_gen","title":"Formula of an n-order model. — f_gen","text":"Given reaction order \\(n\\) , function returns equation corresponding particular n^th^-order kinetic model. \\(n\\neq 1\\): $$y(t)=((n-1)\\,k\\,t+y_0^{1-n}))^{\\frac{1}{n-1}}$$ \\(n=1\\): $$y(t)=y_0\\,e^{-k\\,t}$$","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/f_gen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formula of an n-order model. — f_gen","text":"","code":"f_gen(n)"},{"path":"https://migliomatte.github.io/chemdeg/reference/f_gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formula of an n-order model. — f_gen","text":"n reaction order","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/f_gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formula of an n-order model. — f_gen","text":"formula object containing equation selected n^th^ order kinetic model.","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/f_gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula of an n-order model. — f_gen","text":"","code":"nc <- 2 f_gen(nc) #> y ~ (1 * (k * t + (y0^(-1))/1))^-1 #> <environment: 0x5587d75cdd88>  f_gen(1) #> y ~ y0 * exp(-k * t) #> <environment: 0x5587d72e3998>"},{"path":"https://migliomatte.github.io/chemdeg/reference/fomtdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Total CQA with ascorbic acid (FOMT model) — fomtdata","title":"Total CQA with ascorbic acid (FOMT model) — fomtdata","text":"Degradation data 1.2 mM 5-caffeoylquinic acid (5-CQA) presence 1.2 mM ascorbic acid 37°C. data refer total CQA concentration.","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/fomtdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total CQA with ascorbic acid (FOMT model) — fomtdata","text":"","code":"fomtdata"},{"path":"https://migliomatte.github.io/chemdeg/reference/fomtdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Total CQA with ascorbic acid (FOMT model) — fomtdata","text":"data frame 8 rows 2 columns: time_h Time hours tCQA_AA Normalized concentration total CQA measured time point","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/fomtdata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Total CQA with ascorbic acid (FOMT model) — fomtdata","text":"Yusaku N. Kuniyo . (2013) Degradation Kinetics Chlorogenic Acid Various pH Values Effects Ascorbic Acid Epigallocatechin Gallate Stability Alkaline Conditions, Journal Agricultural Food Chemistry, doi:10.1021/jf304105w , fig 2D, solid diamonds","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/goodness_of_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Goodness-of-fit, non-linear regression — goodness_of_fit","title":"Goodness-of-fit, non-linear regression — goodness_of_fit","text":"Function returns following goodness--fit statistics non-linear regression: AIC, AICc, BIC, RMSE reduced Chi-squared.","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/goodness_of_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Goodness-of-fit, non-linear regression — goodness_of_fit","text":"","code":"goodness_of_fit(fit)"},{"path":"https://migliomatte.github.io/chemdeg/reference/goodness_of_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Goodness-of-fit, non-linear regression — goodness_of_fit","text":"fit nls, lm ord_res object","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/goodness_of_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Goodness-of-fit, non-linear regression — goodness_of_fit","text":"returns table values AIC, AICc, BIC, RSME reduced Chi squared. Single goodness--fit measures can  obtained follows: call standard R functions stats::AIC(), stats::BIC(), stats::sigma() AIC, BIC RMSE, respectively; call chemdeg functions AICC() chiquad_red() AICc reduced chi-squared, respectively.","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/goodness_of_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Goodness-of-fit, non-linear regression — goodness_of_fit","text":"function returns values AIC, AICC, BIC, RMSE reduced chi-squared (\\(\\chi^2_{red}\\)) nls objects. linear model object passed, function returns summary. Given ord_res object (output function det_order()), function returns one results depending model chosen explain data. chiquad_red() function returns value weighted data, \\(\\chi^2_{red}\\) returned weighted regressions.","code":""},{"path":[]},{"path":"https://migliomatte.github.io/chemdeg/reference/goodness_of_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Goodness-of-fit, non-linear regression — goodness_of_fit","text":"","code":"x <- c(1, 2, 3, 4, 5) y <- c(1.2, 3.9, 8.6, 17.4, 26) er <- c(0.5, 0.8, 0.5, 1.9, 1.2) fit1 <- nls(y ~ k * x^2,   data = list(x = x, y = y), start = list(k = 1),   weights = 1 / er^2 ) goodness_of_fit(fit1) #>                  Value #> AIC:        11.9141544 #> AICc:       13.2474878 #> BIC:        11.1330303 #> RMSE:        0.6984450 #> Chi-sq_red:  0.9896681"},{"path":"https://migliomatte.github.io/chemdeg/reference/kin_regr.html","id":null,"dir":"Reference","previous_headings":"","what":"Degradation kinetics — kin_regr","title":"Degradation kinetics — kin_regr","text":"Returns ord_res object either linear non-linear regression degradation kinetics data.","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/kin_regr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degradation kinetics — kin_regr","text":"","code":"kin_regr(x)"},{"path":"https://migliomatte.github.io/chemdeg/reference/kin_regr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Degradation kinetics — kin_regr","text":"x ord_res object","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/kin_regr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Degradation kinetics — kin_regr","text":"Returns either nls lm object based regression performed function det_order().","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/kin_regr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Degradation kinetics — kin_regr","text":"analysis phase space determination reaction order, det_order() performs either linear non-linear regression kinetic data, depending whether reaction order n=0 n>0, respectively. access regression object call kin_degr.","code":""},{"path":[]},{"path":"https://migliomatte.github.io/chemdeg/reference/kin_regr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Degradation kinetics — kin_regr","text":"","code":"t <- c(0, 4, 8, 12, 16, 20) conc <- c(1, 0.51, 0.24, 0.12, 0.07, 0.02) dframe <- data.frame(t, conc) res <- det_order(dframe) #> Reaction order estimated: 1  kin_regr(res) #> Nonlinear regression model #>   model: y ~ y0 * exp(-k * t) #>    data: list(t = dframe[[1]], y = dframe[[2]], y0 = y0) #>      k  #> 0.1739  #>  residual sum-of-squares: 0.0004036 #>  #> Number of iterations to convergence: 3  #> Achieved convergence tolerance: 4.583e-06"},{"path":"https://migliomatte.github.io/chemdeg/reference/ord1.html","id":null,"dir":"Reference","previous_headings":"","what":"First order kinetic data — ord1","title":"First order kinetic data — ord1","text":"Synthetic data first-order kinetic model k=0.7","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/ord1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"First order kinetic data — ord1","text":"","code":"ord1"},{"path":"https://migliomatte.github.io/chemdeg/reference/ord1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"First order kinetic data — ord1","text":"data frame 6 rows 3 columns: t time concentration simulated concentration data time point std.error simulated experimental error","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/par_est_FOMT.html","id":null,"dir":"Reference","previous_headings":"","what":"First-Order Multi-Target parameter starting values — par_est_FOMT","title":"First-Order Multi-Target parameter starting values — par_est_FOMT","text":"par_est_FOMT estimates starting values parameters first-order multi-target model data-set.","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/par_est_FOMT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"First-Order Multi-Target parameter starting values — par_est_FOMT","text":"","code":"par_est_FOMT(x, y = NULL)"},{"path":"https://migliomatte.github.io/chemdeg/reference/par_est_FOMT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"First-Order Multi-Target parameter starting values — par_est_FOMT","text":"x data-frame time concentration first second columns,respectively. Alternatively, array time y array concentrations. y Optional, array concentrations. inserted x array.","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/par_est_FOMT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"First-Order Multi-Target parameter starting values — par_est_FOMT","text":"function returns array suggested initial values parameters.","code":""},{"path":[]},{"path":"https://migliomatte.github.io/chemdeg/reference/par_est_FOMT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"First-Order Multi-Target parameter starting values — par_est_FOMT","text":"","code":"t <- seq(0, 30, by = 6) k <- 0.3 n <- 40 set.seed(100) y <- FOMTm(t, k, n) * (1 + rnorm(length(t), 0, 0.05))  nlsFOMT <- nls(y ~ FOMTm(t, k, n),   data = list(y = y, t = t),   start = par_est_FOMT(t, y) ) summary(nlsFOMT) #>  #> Formula: y ~ FOMTm(t, k, n) #>  #> Parameters: #>   Estimate Std. Error t value Pr(>|t|)     #> k  0.29233    0.01432  20.416  3.4e-05 *** #> n 36.21827    6.92417   5.231  0.00638 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.01309 on 4 degrees of freedom #>  #> Number of iterations to convergence: 3  #> Achieved convergence tolerance: 5.146e-06 #>"},{"path":"https://migliomatte.github.io/chemdeg/reference/phase_space.html","id":null,"dir":"Reference","previous_headings":"","what":"Phase space, linearized model — phase_space","title":"Phase space, linearized model — phase_space","text":"Given ord_res object, function returns linearized model best fits data phase space. ord_res object can obtained using function det_order().","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/phase_space.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Phase space, linearized model — phase_space","text":"","code":"phase_space(x)"},{"path":"https://migliomatte.github.io/chemdeg/reference/phase_space.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Phase space, linearized model — phase_space","text":"x ord_res object","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/phase_space.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Phase space, linearized model — phase_space","text":"Returns lm class object.","code":""},{"path":[]},{"path":"https://migliomatte.github.io/chemdeg/reference/phase_space.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Phase space, linearized model — phase_space","text":"","code":"t <- c(0, 4, 8, 12, 16, 20) conc <- c(1, 0.51, 0.24, 0.12, 0.07, 0.02) dframe <- data.frame(t, conc) res <- det_order(dframe) #> Reaction order estimated: 1  phase_space(res) #>  #> Call: #> stats::lm(formula = log_dx_dt ~ log_x, data = ldframe) #>  #> Coefficients: #> (Intercept)        log_x   #>     -1.9148       0.8886   #>"},{"path":"https://migliomatte.github.io/chemdeg/reference/plot_ord.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of phase space and kinetic curve — plot_ord","title":"Plot of phase space and kinetic curve — plot_ord","text":"function plots results obtained det_order() function. Two plots shown: one representing transformed data phase space kinetic data conventional space along regression curves.","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/plot_ord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of phase space and kinetic curve — plot_ord","text":"","code":"plot_ord(ord_res)"},{"path":"https://migliomatte.github.io/chemdeg/reference/plot_ord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of phase space and kinetic curve — plot_ord","text":"ord_res 'ord_res' object","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/plot_ord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of phase space and kinetic curve — plot_ord","text":"Two plots. first representing transformed data phase space kinetic data conventional space along regression curves. Black line represent best regression curve, whereas green lines show fits reaction order chosen.","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/plot_ord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot of phase space and kinetic curve — plot_ord","text":"","code":"t <- c(0, 4, 8, 12, 16, 20) conc <- c(1, 0.51, 0.24, 0.12, 0.07, 0.02) dframe <- data.frame(t, conc) res <- det_order(dframe) #> Reaction order estimated: 1  plot_ord(res)"},{"path":"https://migliomatte.github.io/chemdeg/reference/results.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of 'ord_res' object — results","title":"Summary of 'ord_res' object — results","text":"Returns results analyses performed det_order() function.","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of 'ord_res' object — results","text":"","code":"results(object)"},{"path":"https://migliomatte.github.io/chemdeg/reference/results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of 'ord_res' object — results","text":"object 'ord_res' object","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of 'ord_res' object — results","text":"prints summary analysis phase space, reaction order, regression results.","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary of 'ord_res' object — results","text":"function prints: linear regression performed phase space, together estimated n value 95% confidence interval brief conclusion results obtained phase space stating reaction order preferred (non-)linear regression performed parameters associated statistics. non-linear regression performed, common goodness--fit measures calculated goodness_of_fit() printed","code":""},{"path":[]},{"path":"https://migliomatte.github.io/chemdeg/reference/results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of 'ord_res' object — results","text":"","code":"t <- c(0, 4, 8, 12, 16, 20) conc <- c(1, 0.51, 0.24, 0.12, 0.07, 0.02) err <- c(0.02, 0.05, 0.04, 0.04, 0.03, 0.02) dframe <- data.frame(t, conc, err) res <- det_order(dframe) #> Reaction order estimated: 1  results(res) #>  #> Linear regression in the phase space:  #> log(dx/dt)= 0.9 log(x) + ( -1.85 ) #>  #> Estimate of n: #>  #>     Estimate   Std. Error      t value     Pr(>|t|)  #> 8.950329e-01 6.381322e-02 1.402582e+01 7.848645e-04  #>  #> Confidence interval of n:  #>     2.5 %    97.5 %  #> 0.6919508 1.0981151  #>  #> Statistical analysis indicates that an order 1 degradation kineitc model is likely to describe the data. #> The null hypothesis H0: #> \"The process is described by an order 1kinetic model\" #>  cannot be rejected. #>  #> Non-linear least squares regression was performed with an order  1  kinetic model: #>   #>  Estimate of k:  #>    Estimate  Std. Error t value     Pr(>|t|) #> k 0.1756979 0.003543597 49.5818 6.306689e-08 #> Waiting for profiling to be done... #> Confidence interval of k:  #>      2.5%     97.5%  #> 0.1670824 0.1851654  #>  #> Goodness-of-fit: #>                   Value #> AIC:        -36.0007045 #> AICc:       -35.0007045 #> BIC:        -36.4171856 #> RMSE:         0.3010471 #> Chi-sq_red:   0.1344415 #> ----------------------------------------------------- #>"},{"path":"https://migliomatte.github.io/chemdeg/reference/urfa.html","id":null,"dir":"Reference","previous_headings":"","what":"Urfa pepper ascorbic acid degradation (2-nd order) — urfa","title":"Urfa pepper ascorbic acid degradation (2-nd order) — urfa","text":"Data describing degradation kinetics ascorbic acid dehydration Urfa peppers. peppers treated hot air 55, 65 75 °C.","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/urfa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Urfa pepper ascorbic acid degradation (2-nd order) — urfa","text":"","code":"urfa"},{"path":"https://migliomatte.github.io/chemdeg/reference/urfa.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Urfa pepper ascorbic acid degradation (2-nd order) — urfa","text":"data frame 8 rows 4 columns: time_min time minutes AA_55 normalized concentration ascorbic acid Urfa peppers dehydrated 55°C AA_65 normalized concentration ascorbic acid Urfa peppers dehydrated 65°C AA_75 normalized concentration ascorbic acid Urfa peppers dehydrated 75°C","code":""},{"path":"https://migliomatte.github.io/chemdeg/reference/urfa.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Urfa pepper ascorbic acid degradation (2-nd order) — urfa","text":"Ş. Dağhan, . Yildirim, F. Mehmet Yilmaz, H. Vardin M. Karaaslan (2018) effect temperature method drying isot (Urfa pepper) Vitamin C degradation kinetics, Italian Journal Food Science, doi:10.14674/IJFS-1070 , fig 5, hot-air","code":""},{"path":[]},{"path":"https://migliomatte.github.io/chemdeg/news/index.html","id":"chemdeg-013-1","dir":"Changelog","previous_headings":"","what":"chemdeg 0.1.3","title":"chemdeg 0.1.3","text":"Adding citation information.","code":""},{"path":"https://migliomatte.github.io/chemdeg/news/index.html","id":"chemdeg-012","dir":"Changelog","previous_headings":"","what":"chemdeg 0.1.2","title":"chemdeg 0.1.2","text":"CRAN release: 2023-05-17 Debugging par modifications using .exit() function.","code":""},{"path":"https://migliomatte.github.io/chemdeg/news/index.html","id":"chemdeg-011","dir":"Changelog","previous_headings":"","what":"chemdeg 0.1.1","title":"chemdeg 0.1.1","text":"Removing links vignette README file.","code":""},{"path":"https://migliomatte.github.io/chemdeg/news/index.html","id":"chemdeg-010","dir":"Changelog","previous_headings":"","what":"chemdeg 0.1.0","title":"chemdeg 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
